// Package ns_p contains models for http://docs.eebus.org/spine/xsd/v1
package model

// Code generated by github.com/andig/xsd2go. DO NOT EDIT.

import "github.com/evcc-io/eebus/util"

// VendorStateCodeType type
type VendorStateCodeType string

// LastErrorCodeType type
type LastErrorCodeType string

// DeviceDiagnosisOperatingStateType type
type DeviceDiagnosisOperatingStateType DeviceDiagnosisOperatingStateEnumType

// DeviceDiagnosisOperatingStateEnumType type
type DeviceDiagnosisOperatingStateEnumType string

// DeviceDiagnosisOperatingStateEnumType constants
const (
	DeviceDiagnosisOperatingStateEnumTypeNormalOperation  DeviceDiagnosisOperatingStateEnumType = "normalOperation"
	DeviceDiagnosisOperatingStateEnumTypeStandby          DeviceDiagnosisOperatingStateEnumType = "standby"
	DeviceDiagnosisOperatingStateEnumTypeFailure          DeviceDiagnosisOperatingStateEnumType = "failure"
	DeviceDiagnosisOperatingStateEnumTypeServiceNeeded    DeviceDiagnosisOperatingStateEnumType = "serviceNeeded"
	DeviceDiagnosisOperatingStateEnumTypeOverrideDetected DeviceDiagnosisOperatingStateEnumType = "overrideDetected"
	DeviceDiagnosisOperatingStateEnumTypeInAlarm          DeviceDiagnosisOperatingStateEnumType = "inAlarm"
	DeviceDiagnosisOperatingStateEnumTypeNotReachable     DeviceDiagnosisOperatingStateEnumType = "notReachable"
	DeviceDiagnosisOperatingStateEnumTypeFinished         DeviceDiagnosisOperatingStateEnumType = "finished"
)

// PowerSupplyConditionType type
type PowerSupplyConditionType PowerSupplyConditionEnumType

// PowerSupplyConditionEnumType type
type PowerSupplyConditionEnumType string

// PowerSupplyConditionEnumType constants
const (
	PowerSupplyConditionEnumTypeGood     PowerSupplyConditionEnumType = "good"
	PowerSupplyConditionEnumTypeLow      PowerSupplyConditionEnumType = "low"
	PowerSupplyConditionEnumTypeCritical PowerSupplyConditionEnumType = "critical"
	PowerSupplyConditionEnumTypeUnknown  PowerSupplyConditionEnumType = "unknown"
	PowerSupplyConditionEnumTypeError    PowerSupplyConditionEnumType = "error"
)

// DeviceDiagnosisStateDataType complex type
type DeviceDiagnosisStateDataType struct {
	Timestamp            *string                            `json:"timestamp,omitempty"`
	OperatingState       *DeviceDiagnosisOperatingStateType `json:"operatingState,omitempty"`
	VendorStateCode      *VendorStateCodeType               `json:"vendorStateCode,omitempty"`
	LastErrorCode        *LastErrorCodeType                 `json:"lastErrorCode,omitempty"`
	UpTime               *string                            `json:"upTime,omitempty"`
	TotalUpTime          *string                            `json:"totalUpTime,omitempty"`
	PowerSupplyCondition *PowerSupplyConditionType          `json:"powerSupplyCondition,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m DeviceDiagnosisStateDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *DeviceDiagnosisStateDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// DeviceDiagnosisHeartbeatDataType complex type
type DeviceDiagnosisHeartbeatDataType struct {
	Timestamp        *string `json:"timestamp,omitempty"`
	HeartbeatCounter *uint64 `json:"heartbeatCounter,omitempty"`
	HeartbeatTimeout *string `json:"heartbeatTimeout,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m DeviceDiagnosisHeartbeatDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *DeviceDiagnosisHeartbeatDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// DeviceDiagnosisServiceDataType complex type
type DeviceDiagnosisServiceDataType struct {
	Timestamp        string  `json:"timestamp"`
	InstallationTime string  `json:"installationTime"`
	BootCounter      *uint64 `json:"bootCounter"`
	NextService      string  `json:"nextService"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m DeviceDiagnosisServiceDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *DeviceDiagnosisServiceDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}
