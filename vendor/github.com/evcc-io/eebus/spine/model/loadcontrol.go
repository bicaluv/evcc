// Package ns_p contains models for http://docs.eebus.org/spine/xsd/v1
package model

// Code generated by github.com/andig/xsd2go. DO NOT EDIT.

import "github.com/evcc-io/eebus/util"

// LoadControlEventIdType type
type LoadControlEventIdType string

// LoadControlEventActionType type
type LoadControlEventActionType LoadControlEventActionEnumType

// LoadControlEventActionEnumType type
type LoadControlEventActionEnumType string

// LoadControlEventActionEnumType constants
const (
	LoadControlEventActionEnumTypePause     LoadControlEventActionEnumType = "pause"
	LoadControlEventActionEnumTypeResume    LoadControlEventActionEnumType = "resume"
	LoadControlEventActionEnumTypeReduce    LoadControlEventActionEnumType = "reduce"
	LoadControlEventActionEnumTypeIncrease  LoadControlEventActionEnumType = "increase"
	LoadControlEventActionEnumTypeEmergency LoadControlEventActionEnumType = "emergency"
	LoadControlEventActionEnumTypeNormal    LoadControlEventActionEnumType = "normal"
)

// LoadControlEventStateType type
type LoadControlEventStateType LoadControlEventStateEnumType

// LoadControlEventStateEnumType type
type LoadControlEventStateEnumType string

// LoadControlEventStateEnumType constants
const (
	LoadControlEventStateEnumTypeEventaccepted  LoadControlEventStateEnumType = "eventAccepted"
	LoadControlEventStateEnumTypeEventstarted   LoadControlEventStateEnumType = "eventStarted"
	LoadControlEventStateEnumTypeEventstopped   LoadControlEventStateEnumType = "eventStopped"
	LoadControlEventStateEnumTypeEventrejected  LoadControlEventStateEnumType = "eventRejected"
	LoadControlEventStateEnumTypeEventcancelled LoadControlEventStateEnumType = "eventCancelled"
	LoadControlEventStateEnumTypeEventerror     LoadControlEventStateEnumType = "eventError"
)

// LoadControlLimitIdType type
type LoadControlLimitIdType uint

// LoadControlLimitTypeType type
type LoadControlLimitTypeType LoadControlLimitTypeEnumType

// LoadControlLimitTypeEnumType type
type LoadControlLimitTypeEnumType string

// LoadControlLimitTypeEnumType constants
const (
	LoadControlLimitTypeEnumTypeMinvaluelimit LoadControlLimitTypeEnumType = "minValueLimit"
	LoadControlLimitTypeEnumTypeMaxvaluelimit LoadControlLimitTypeEnumType = "maxValueLimit"
)

// LoadControlCategoryType type
type LoadControlCategoryType LoadControlCategoryEnumType

// LoadControlCategoryEnumType type
type LoadControlCategoryEnumType string

// LoadControlCategoryEnumType constants
const (
	LoadControlCategoryEnumTypeObligation     LoadControlCategoryEnumType = "obligation"
	LoadControlCategoryEnumTypeRecommendation LoadControlCategoryEnumType = "recommendation"
	LoadControlCategoryEnumTypeOptimization   LoadControlCategoryEnumType = "optimization"
)

// LoadControlNodeDataType complex type
type LoadControlNodeDataType struct {
	IsNodeRemoteControllable *bool `json:"isNodeRemoteControllable,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlNodeDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlNodeDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlEventDataType complex type
type LoadControlEventDataType struct {
	Timestamp          *string                     `json:"timestamp,omitempty"`
	EventId            *LoadControlEventIdType     `json:"eventId,omitempty,omitempty"`
	EventActionConsume *LoadControlEventActionType `json:"eventActionConsume,omitempty"`
	EventActionProduce *LoadControlEventActionType `json:"eventActionProduce,omitempty"`
	TimePeriod         *TimePeriodType             `json:"timePeriod,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlEventDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlEventDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlEventListDataType complex type
type LoadControlEventListDataType struct {
	LoadControlEventData []LoadControlEventDataType `json:"loadControlEventData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlEventListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlEventListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlEventListDataSelectorsType complex type
type LoadControlEventListDataSelectorsType struct {
	TimestampInterval *TimestampIntervalType  `json:"timestampInterval,omitempty"`
	EventId           *LoadControlEventIdType `json:"eventId,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlEventListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlEventListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlStateDataType complex type
type LoadControlStateDataType struct {
	Timestamp                 *string                     `json:"timestamp"`
	EventId                   *LoadControlEventIdType     `json:"eventId,omitempty"`
	EventStateConsume         *LoadControlEventStateType  `json:"eventStateConsume"`
	AppliedEventActionConsume *LoadControlEventActionType `json:"appliedEventActionConsume"`
	EventStateProduce         *LoadControlEventStateType  `json:"eventStateProduce"`
	AppliedEventActionProduce *LoadControlEventActionType `json:"appliedEventActionProduce"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlStateDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlStateDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlStateListDataType complex type
type LoadControlStateListDataType struct {
	LoadControlStateData []LoadControlStateDataType `json:"loadControlStateData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlStateListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlStateListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlStateListDataSelectorsType complex type
type LoadControlStateListDataSelectorsType struct {
	TimestampInterval *TimestampIntervalType  `json:"timestampInterval,omitempty"`
	EventId           *LoadControlEventIdType `json:"eventId,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlStateListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlStateListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitDataType complex type
type LoadControlLimitDataType struct {
	LimitId           *LoadControlLimitIdType `json:"limitId,omitempty"`
	IsLimitChangeable *bool                   `json:"isLimitChangeable,omitempty"`
	IsLimitActive     *bool                   `json:"isLimitActive,omitempty"`
	TimePeriod        *TimePeriodType         `json:"timePeriod,omitempty"`
	Value             *ScaledNumberType       `json:"value,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitListDataType complex type
type LoadControlLimitListDataType struct {
	LoadControlLimitData []LoadControlLimitDataType `json:"loadControlLimitData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitListDataSelectorsType complex type
type LoadControlLimitListDataSelectorsType struct {
	LimitId *LoadControlLimitIdType `json:"limitId,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitConstraintsDataType complex type
type LoadControlLimitConstraintsDataType struct {
	LimitId       *LoadControlLimitIdType `json:"limitId,omitempty"`
	ValueRangeMin *ScaledNumberType       `json:"valueRangeMin,omitempty"`
	ValueRangeMax *ScaledNumberType       `json:"valueRangeMax,omitempty"`
	ValueStepSize *ScaledNumberType       `json:"valueStepSize,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitConstraintsDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitConstraintsDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitConstraintsListDataType complex type
type LoadControlLimitConstraintsListDataType struct {
	LoadControlLimitConstraintsData []LoadControlLimitConstraintsDataType `json:"loadControlLimitConstraintsData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitConstraintsListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitConstraintsListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitConstraintsListDataSelectorsType complex type
type LoadControlLimitConstraintsListDataSelectorsType struct {
	LimitId *LoadControlLimitIdType `json:"limitId,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitConstraintsListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitConstraintsListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitDescriptionDataType complex type
type LoadControlLimitDescriptionDataType struct {
	LimitId        *LoadControlLimitIdType   `json:"limitId,omitempty"`
	LimitType      *LoadControlLimitTypeType `json:"limitType,omitempty"`
	LimitCategory  *LoadControlCategoryType  `json:"limitCategory,omitempty"`
	LimitDirection *EnergyDirectionType      `json:"limitDirection,omitempty"`
	MeasurementId  *MeasurementIdType        `json:"measurementId,omitempty"`
	Unit           *UnitOfMeasurementType    `json:"unit,omitempty"`
	ScopeType      *ScopeTypeType            `json:"scopeType,omitempty"`
	Label          *LabelType                `json:"label,omitempty"`
	Description    *DescriptionType          `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitDescriptionDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitDescriptionDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitDescriptionListDataType complex type
type LoadControlLimitDescriptionListDataType struct {
	LoadControlLimitDescriptionData []LoadControlLimitDescriptionDataType `json:"loadControlLimitDescriptionData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitDescriptionListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitDescriptionListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// LoadControlLimitDescriptionListDataSelectorsType complex type
type LoadControlLimitDescriptionListDataSelectorsType struct {
	LimitId        *LoadControlLimitIdType   `json:"limitId,omitempty"`
	LimitType      *LoadControlLimitTypeType `json:"limitType,omitempty"`
	LimitDirection *EnergyDirectionType      `json:"limitDirection,omitempty"`
	MeasurementId  *MeasurementIdType        `json:"measurementId,omitempty"`
	ScopeType      *ScopeTypeType            `json:"scopeType,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m LoadControlLimitDescriptionListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *LoadControlLimitDescriptionListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}
