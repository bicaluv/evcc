// Package ns_p contains models for http://docs.eebus.org/spine/xsd/v1
package model

// Code generated by github.com/andig/xsd2go. DO NOT EDIT.

import "github.com/evcc-io/eebus/util"

// DeviceClassificationStringType type
type DeviceClassificationStringType string

// PowerSourceType type
type PowerSourceType PowerSourceEnumType

// PowerSourceEnumType type
type PowerSourceEnumType string

// PowerSourceEnumType constants
const (
	PowerSourceEnumTypeUnknown          PowerSourceEnumType = "unknown"
	PowerSourceEnumTypeMainssinglephase PowerSourceEnumType = "mainsSinglePhase"
	PowerSourceEnumTypeMains3Phase      PowerSourceEnumType = "mains3Phase"
	PowerSourceEnumTypeBattery          PowerSourceEnumType = "battery"
	PowerSourceEnumTypeDc               PowerSourceEnumType = "dc"
)

// DeviceClassificationManufacturerDataType complex type
type DeviceClassificationManufacturerDataType struct {
	DeviceName                     *DeviceClassificationStringType `json:"deviceName,omitempty"`
	DeviceCode                     *DeviceClassificationStringType `json:"deviceCode,omitempty"`
	SerialNumber                   *DeviceClassificationStringType `json:"serialNumber,omitempty"`
	SoftwareRevision               *DeviceClassificationStringType `json:"softwareRevision,omitempty"`
	HardwareRevision               *DeviceClassificationStringType `json:"hardwareRevision,omitempty"`
	VendorName                     *DeviceClassificationStringType `json:"vendorName,omitempty"`
	VendorCode                     *DeviceClassificationStringType `json:"vendorCode,omitempty"`
	BrandName                      *DeviceClassificationStringType `json:"brandName,omitempty"`
	PowerSource                    string                          `json:"powerSource,omitempty"`
	ManufacturerNodeIdentification *DeviceClassificationStringType `json:"manufacturerNodeIdentification,omitempty"`
	ManufacturerLabel              *LabelType                      `json:"manufacturerLabel,omitempty"`
	ManufacturerDescription        *DescriptionType                `json:"manufacturerDescription,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m DeviceClassificationManufacturerDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *DeviceClassificationManufacturerDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// DeviceClassificationUserDataType complex type
type DeviceClassificationUserDataType struct {
	UserNodeIdentification *DeviceClassificationStringType `json:"userNodeIdentification,omitempty"`
	UserLabel              *LabelType                      `json:"userLabel,omitempty"`
	UserDescription        *DescriptionType                `json:"userDescription,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m DeviceClassificationUserDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *DeviceClassificationUserDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}
