// Package ns_p contains models for http://docs.eebus.org/spine/xsd/v1
package model

// Code generated by github.com/andig/xsd2go. DO NOT EDIT.

import "github.com/evcc-io/eebus/util"

// NetworkManagementNativeSetupType type
type NetworkManagementNativeSetupType string

// NetworkManagementScanSetupType type
type NetworkManagementScanSetupType string

// NetworkManagementSetupType type
type NetworkManagementSetupType string

// NetworkManagementCandidateSetupType type
type NetworkManagementCandidateSetupType string

// NetworkManagementTechnologyAddressType type
type NetworkManagementTechnologyAddressType string

// NetworkManagementCommunicationsTechnologyInformationType type
type NetworkManagementCommunicationsTechnologyInformationType string

// NetworkManagementMinimumTrustLevelType type
type NetworkManagementMinimumTrustLevelType string

// NetworkManagementProcessTimeoutType type
type NetworkManagementProcessTimeoutType string

// NetworkManagementFeatureSetType type
type NetworkManagementFeatureSetType string

// NetworkManagementFeatureSetType constants
const (
	NetworkManagementFeatureSetTypeGateway NetworkManagementFeatureSetType = "gateway"
	NetworkManagementFeatureSetTypeRouter  NetworkManagementFeatureSetType = "router"
	NetworkManagementFeatureSetTypeSmart   NetworkManagementFeatureSetType = "smart"
	NetworkManagementFeatureSetTypeSimple  NetworkManagementFeatureSetType = "simple"
)

// NetworkManagementProcessStateStateType type
type NetworkManagementProcessStateStateType string

// NetworkManagementProcessStateStateType constants
const (
	NetworkManagementProcessStateStateTypeSucceeded NetworkManagementProcessStateStateType = "succeeded"
	NetworkManagementProcessStateStateTypeFailed    NetworkManagementProcessStateStateType = "failed"
	NetworkManagementProcessStateStateTypeAborted   NetworkManagementProcessStateStateType = "aborted"
)

// NetworkManagementStateChangeType type
type NetworkManagementStateChangeType string

// NetworkManagementStateChangeType constants
const (
	NetworkManagementStateChangeTypeAdded    NetworkManagementStateChangeType = "added"
	NetworkManagementStateChangeTypeRemoved  NetworkManagementStateChangeType = "removed"
	NetworkManagementStateChangeTypeModified NetworkManagementStateChangeType = "modified"
)

// NetworkManagementAddNodeCallType complex type
type NetworkManagementAddNodeCallType struct {
	NodeAddress *FeatureAddressType                  `json:"nodeAddress,omitempty"`
	NativeSetup *NetworkManagementNativeSetupType    `json:"nativeSetup,omitempty"`
	Timeout     *NetworkManagementProcessTimeoutType `json:"timeout,omitempty"`
	Label       *LabelType                           `json:"label,omitempty"`
	Description *DescriptionType                     `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementAddNodeCallType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementAddNodeCallType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementRemoveNodeCallType complex type
type NetworkManagementRemoveNodeCallType struct {
	NodeAddress *FeatureAddressType                  `json:"nodeAddress,omitempty"`
	Timeout     *NetworkManagementProcessTimeoutType `json:"timeout,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementRemoveNodeCallType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementRemoveNodeCallType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementModifyNodeCallType complex type
type NetworkManagementModifyNodeCallType struct {
	NodeAddress *FeatureAddressType                  `json:"nodeAddress,omitempty"`
	NativeSetup *NetworkManagementNativeSetupType    `json:"nativeSetup,omitempty"`
	Timeout     *NetworkManagementProcessTimeoutType `json:"timeout,omitempty"`
	Label       *LabelType                           `json:"label,omitempty"`
	Description *DescriptionType                     `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementModifyNodeCallType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementModifyNodeCallType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementScanNetworkCallType complex type
type NetworkManagementScanNetworkCallType struct {
	ScanSetup *NetworkManagementScanSetupType      `json:"scanSetup,omitempty"`
	Timeout   *NetworkManagementProcessTimeoutType `json:"timeout,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementScanNetworkCallType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementScanNetworkCallType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementDiscoverCallType complex type
type NetworkManagementDiscoverCallType struct {
	DiscoverAddress *FeatureAddressType `json:"discoverAddress,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementDiscoverCallType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementDiscoverCallType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementAbortCallType complex type
type NetworkManagementAbortCallType struct {
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementAbortCallType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementAbortCallType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementProcessStateDataType complex type
type NetworkManagementProcessStateDataType struct {
	State       *NetworkManagementProcessStateStateType `json:"state,omitempty"`
	Description *DescriptionType                        `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementProcessStateDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementProcessStateDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementJoiningModeDataType complex type
type NetworkManagementJoiningModeDataType struct {
	Setup *NetworkManagementSetupType `json:"setup,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementJoiningModeDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementJoiningModeDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementReportCandidateDataType complex type
type NetworkManagementReportCandidateDataType struct {
	CandidateSetup    *NetworkManagementCandidateSetupType `json:"candidateSetup,omitempty"`
	SetupUsableForAdd *bool                                `json:"setupUsableForAdd,omitempty"`
	Label             *LabelType                           `json:"label,omitempty"`
	Description       *DescriptionType                     `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementReportCandidateDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementReportCandidateDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementDeviceDescriptionDataType complex type
type NetworkManagementDeviceDescriptionDataType struct {
	DeviceAddress                       *DeviceAddressType                                        `json:"deviceAddress,omitempty"`
	DeviceType                          *DeviceTypeType                                           `json:"deviceType,omitempty"`
	NetworkManagementResponsibleAddress *FeatureAddressType                                       `json:"networkManagementResponsibleAddress,omitempty"`
	NativeSetup                         *NetworkManagementNativeSetupType                         `json:"nativeSetup,omitempty"`
	TechnologyAddress                   *NetworkManagementTechnologyAddressType                   `json:"technologyAddress,omitempty"`
	CommunicationsTechnologyInformation *NetworkManagementCommunicationsTechnologyInformationType `json:"communicationsTechnologyInformation,omitempty"`
	NetworkFeatureSet                   *NetworkManagementFeatureSetType                          `json:"networkFeatureSet,omitempty"`
	LastStateChange                     *NetworkManagementStateChangeType                         `json:"lastStateChange,omitempty"`
	MinimumTrustLevel                   *NetworkManagementMinimumTrustLevelType                   `json:"minimumTrustLevel,omitempty"`
	Label                               *LabelType                                                `json:"label,omitempty"`
	Description                         *DescriptionType                                          `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementDeviceDescriptionDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementDeviceDescriptionDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementDeviceDescriptionListDataType complex type
type NetworkManagementDeviceDescriptionListDataType struct {
	NetworkManagementDeviceDescriptionData []NetworkManagementDeviceDescriptionDataType `json:"networkManagementDeviceDescriptionData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementDeviceDescriptionListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementDeviceDescriptionListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementDeviceDescriptionListDataSelectorsType complex type
type NetworkManagementDeviceDescriptionListDataSelectorsType struct {
	DeviceAddress *DeviceAddressType `json:"deviceAddress,omitempty"`
	DeviceType    *DeviceTypeType    `json:"deviceType,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementDeviceDescriptionListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementDeviceDescriptionListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementEntityDescriptionDataType complex type
type NetworkManagementEntityDescriptionDataType struct {
	EntityAddress     *EntityAddressType                      `json:"entityAddress,omitempty"`
	EntityType        *EntityTypeType                         `json:"entityType,omitempty"`
	LastStateChange   *NetworkManagementStateChangeType       `json:"lastStateChange,omitempty"`
	MinimumTrustLevel *NetworkManagementMinimumTrustLevelType `json:"minimumTrustLevel,omitempty"`
	Label             *LabelType                              `json:"label,omitempty"`
	Description       *DescriptionType                        `json:"description,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementEntityDescriptionDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementEntityDescriptionDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementEntityDescriptionListDataType complex type
type NetworkManagementEntityDescriptionListDataType struct {
	NetworkManagementEntityDescriptionData []NetworkManagementEntityDescriptionDataType `json:"networkManagementEntityDescriptionData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementEntityDescriptionListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementEntityDescriptionListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementEntityDescriptionListDataSelectorsType complex type
type NetworkManagementEntityDescriptionListDataSelectorsType struct {
	EntityAddress *EntityAddressType `json:"entityAddress,omitempty"`
	EntityType    *EntityTypeType    `json:"entityType,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementEntityDescriptionListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementEntityDescriptionListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementFeatureDescriptionDataType complex type
type NetworkManagementFeatureDescriptionDataType struct {
	FeatureAddress    *FeatureAddressType                     `json:"featureAddress,omitempty"`
	FeatureType       *FeatureTypeType                        `json:"featureType,omitempty"`
	SpecificUsage     []FeatureSpecificUsageType              `json:"specificUsage,omitempty"`
	FeatureGroup      *FeatureGroupType                       `json:"featureGroup,omitempty"`
	Role              *RoleType                               `json:"role,omitempty"`
	SupportedFunction []FunctionPropertyType                  `json:"supportedFunction,omitempty"`
	LastStateChange   *NetworkManagementStateChangeType       `json:"lastStateChange,omitempty"`
	MinimumTrustLevel *NetworkManagementMinimumTrustLevelType `json:"minimumTrustLevel,omitempty"`
	Label             *LabelType                              `json:"label,omitempty"`
	Description       *DescriptionType                        `json:"description,omitempty"`
	MaxResponseDelay  *MaxResponseDelayType                   `json:"maxResponseDelay,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementFeatureDescriptionDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementFeatureDescriptionDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementFeatureDescriptionListDataType complex type
type NetworkManagementFeatureDescriptionListDataType struct {
	NetworkManagementFeatureDescriptionData []NetworkManagementFeatureDescriptionDataType `json:"networkManagementFeatureDescriptionData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementFeatureDescriptionListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementFeatureDescriptionListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// NetworkManagementFeatureDescriptionListDataSelectorsType complex type
type NetworkManagementFeatureDescriptionListDataSelectorsType struct {
	FeatureAddress *FeatureAddressType `json:"featureAddress,omitempty"`
	FeatureType    *FeatureTypeType    `json:"featureType,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m NetworkManagementFeatureDescriptionListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *NetworkManagementFeatureDescriptionListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}
